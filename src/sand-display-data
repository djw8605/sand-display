#!/usr/bin/env python

import os
import json
import argparse
import tempfile
import urllib.parse

import sls_client.query as sls_query

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--community", dest="community", default="OSG")
    parser.add_argument("-o", "--output-json", dest="output")
    return parser.parse_args()

def main():
    args = parse_args()
    qs = urllib.parse.urlencode([("type", "host"), ("group-communities", args.community)])
    response = sls_query.query(qs)

    sites = {}
    for record in response:
        skip = False
        for key in ['location-sitename', 'location-latitude', 'location-longitude', 'host-name']:
            if key not in record:
                skip = True
                hostname = record.get("host-name", ["unknown"])[-1]
                print("WARNING: Entry with hostname {} has missing data: {}".format(hostname, key))
        if skip:
            continue
        site = record['location-sitename'][-1]
        site_info = sites.setdefault(site, {})
        site_info['Latitude'] = record['location-latitude'][-1]
        site_info['Longitude'] = record['location-longitude'][-1]
        site_info['Name'] = site
        site_info['LongName'] = site
        resources = site_info.setdefault('Resources', [])
        resources.append({"Name": record['host-name'][-1]})

    if sites:
        print("Sites for community {}\n".format(args.community))
    else:
        print("No known sites for community {}".format(args.community))
    for site, site_info in sites.items():
        print("Site: {}".format(site))
        print("- Latitude: {}".format(site_info['Latitude']))
        print("- Longitude: {}".format(site_info['Longitude']))
        print("- Endpoints: {}".format(", ".join([i['Name'] for i in site_info['Resources']]) if site_info['Resources'] else "None"))
        print("\n")

    if args.output:
        dirname = os.path.split(args.output)[0]
        
        with tempfile.NamedTemporaryFile(mode='w', dir=dirname, encoding='utf-8') as temp_handle:
            json.dump(sites, temp_handle)
            os.rename(temp_handle.name, args.output)
            temp_handle._closer.delete = False

if __name__ == '__main__':
    main()
